{"version":3,"sources":["components/header/index.js","utils/auth.js","components/SwipeCard.js","pages/Home.js","utils/mutations.js","pages/Login.js","pages/Signup.js","utils/queries.js","pages/ChatHome.js","components/Messages.js","pages/Chat.js","components/ImgUpload/index.js","pages/Profile.js","pages/Swipe.js","App.js","index.js"],"names":["Header","className","to","decode","this","getToken","token","console","log","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","db","name","url","username","interests","age","pet","pet_name","breed","nature","gender","SwipeCard","useState","length","currentIndex","setCurrentIndex","lastDirection","setLastDirection","currentIndexRef","useRef","childRefs","useMemo","Array","fill","map","i","React","createRef","updateCurrentIndex","val","current","canGoBack","canSwipe","swipe","dir","goBack","newIndex","restoreCard","isVisible","setIsVisible","href","rel","owner","index","ref","onSwipe","direction","nameToDelete","swiped","onCardLeftScreen","idx","style","backgroundImage","onClick","event","backgroundColor","Home","Auth","loggedIn","replace","CREATE_OWNER","gql","LOGIN_USER","CREATE_MESSAGE","Login","props","Navigate","useNavigate","email","password","formState","setFormState","useMutation","login","error","data","handleChange","target","value","handleFormSubmit","preventDefault","variables","onSubmit","placeholder","type","onChange","cursor","message","Signup","createOwner","_id","QUERY_OWNER_BY_ID","QUERY_MESSAGE","QUERY_CHAT","ChatHome","id","getProfile","useQuery","user","loading","chatList","chat","List","sx","width","maxWidth","bgcolor","ListItem","alignItems","pathname","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Fragment","Typography","display","component","variant","color","Divider","Messages","useParams","userlo","formData","setFormData","pollInterval","createMessage","messages","Messagesubmit","content","Box","pb","CssBaseline","button","Paper","position","bottom","left","right","elevation","Chat","ImgUpload","state","selectedFile","onFileChange","setState","files","onFileUpload","FormData","append","axios","post","fileData","Component","Profile","petName","petBreed","petAge","petNature","petGender","logout","Swipe","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a197994f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n\n    return(\n        <header className=\"bg-primary text-light mb-4 py-3 flex-row align-center\">\n            <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n                <div>\n                    <Link to=\"/profile\">\n                        <h1>👤</h1>\n                    </Link>\n                </div>\n                <div>\n                    <Link to='/'>\n                        <h2>Paws N' Play</h2>\n                    </Link>\n                </div>\n                <div>\n                    <Link to=\"/chats\">\n                        <h1>💬</h1>\n                    </Link>\n                </div>\n            </div>   \n        </header>\n    )\n};\n\nexport default Header;","import decode from 'jwt-decode';\n\nclass AuthService {\n    getProfile() {\n      return decode(this.getToken());\n    }\n  \n    loggedIn() {\n      const token = this.getToken();\n      console.log(decode(token))\n      return !!token && !this.isTokenExpired(token);\n    }\n  \n    isTokenExpired(token) {\n      try{\n        const decoded = decode(token);\n        if(decoded.exp < Date.now() /1000) {\n          return true;\n        }else return false;\n      }catch(err) {\n        return false;\n      }\n        }\n      \n    \n    getToken() {\n      return localStorage.getItem('id_token');\n    }\n  \n    login(idToken) {\n      \n      localStorage.setItem('id_token', idToken);\n     \n      window.location.assign('/');\n    }\n  \n    logout() {\n      localStorage.removeItem('id_token');\n      window.location.assign('/');\n    }\n  }\n\nexport default new AuthService();\n","import React, { useState, useMemo, useRef } from 'react'\n// import background from './Courses.PNG'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: 'Bill',\n    url: './test_images/Bill.jpg',\n    username: 'BillyBob',\n    interests: 'Bowling and coffee',\n    age: '54',\n    pet: {\n      pet_name: \"Scrappy Doo\",\n      breed: \"Mutt\",\n      age: \"1\",\n      nature: \"Hyper\",\n      gender: \"Male\"\n    }\n  },\n  {\n    name: 'Torrence',\n    url: './test_images/Torrence.jpg',\n    username: 'Torrence&Chaz',\n    age: '23',\n    interests: 'Latest fashion',\n    pet: {\n      pet_name: \"Chaz\",\n      breed: \"Buldog\",\n      age: \"3\",\n      nature: \"Lazy\",\n      gender: \"Male\"\n    }\n  },\n  {\n    name: 'Will',\n    url: './test_images/Will.jpg',\n    username: 'I am Legend',\n    age: '38',\n    interests: 'Mannequins',\n    pet: {\n      pet_name: \"Sam\",\n      breed: \"German Shepherd\",\n      age: \"4\",\n      nature: \"Well Trained\",\n      gender: \"Female\"\n    }\n  },\n  {\n    name: 'Ray',\n    url: './test_images/Ray.jpg',\n    username: 'MantaRay',\n    interests: 'House Decoration',\n    age: '32',\n    pet: {\n      pet_name: \"Marshmallow\",\n      breed: \"Husky\",\n      age: \"4\",\n      nature: \"Sleepy\",\n      gender: \"Female\"\n    }\n  },\n  {\n    name: 'Jill',\n    url: './test_images/Jill.jpg',\n    username: 'Jill on a Hill',\n    interests: 'Gardening!',\n    age: '32',\n    pet: {\n      pet_name: \"Daisy\",\n      breed: \"Labrador\",\n      age: \"5\",\n      nature: \"Calm\",\n      gender: \"Female\"\n    }\n  }\n]\n\nfunction SwipeCard () {\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1)\n  const [lastDirection, setLastDirection] = useState()\n  // used for outOfFrame closure\n  const currentIndexRef = useRef(currentIndex)\n  const childRefs = useMemo(\n    () =>\n      Array(db.length)\n        .fill(0)\n        .map((i) => React.createRef()),\n    []\n  )\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val)\n    currentIndexRef.current = val\n  }\n  const canGoBack = currentIndex < db.length - 1\n  const canSwipe = currentIndex >= 0\n  // set last direction and decrease current index\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction)\n    updateCurrentIndex(index - 1)\n  }\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n    // handle the case in which go back is pressed before card goes outOfFrame\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n    // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  }\n  const swipe = async (dir) => {\n    if (canSwipe && currentIndex < db.length) {\n      await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n    }\n  }\n  // increase current index and show card\n  const goBack = async () => {\n    if (!canGoBack) return\n    const newIndex = currentIndex + 1\n    updateCurrentIndex(newIndex)\n    await childRefs[newIndex].current.restoreCard()\n  }\n\n  // useState to hold visibility\n  const [isVisible, setIsVisible] = useState(true);\n\n  // function to change visibility\n  const showInfo = event => {\n    setIsVisible(current => !current);\n  };\n\n  \n  return (\n    <div>\n      <link\n        href='https://fonts.googleapis.com/css?family=Damion&display=swap'\n        rel='stylesheet'\n      />\n      <link\n        href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n        rel='stylesheet'\n      />\n      <h1>Meet New PlayPals!</h1>\n      <div className='cardContainer'>\n        {db.map((owner, index) => (\n          <div>\n          <TinderCard\n            ref={childRefs[index]}\n            className='swipe'\n            key={owner.name}\n            onSwipe={(dir) => swiped(dir, owner.name, index)}\n            onCardLeftScreen={() => outOfFrame(owner.name, index)}\n          >\n            <div\n              style={{ backgroundImage: `url(${owner.url})` }}\n              className='card'\n            >\n            <div className={`ownerInfo ${isVisible ? 'hidden' : 'visible'}`}>\n              <div>\n                <ul>\n                    Pet Info\n                    <li>Pet's Name: {owner.pet.pet_name}</li>\n                    <li>Pet's Breed: {owner.pet.breed}</li>\n                    <li>Pet's Age: {owner.pet.age}</li>\n                    <li>Pet's Nature: {owner.pet.nature}</li>\n                    <li>Pet's Gender: {owner.pet.gender}</li>\n                </ul>\n                <ul>\n                    Owner Info\n                    <li>Username: {owner.name}</li>\n                    <li>Age: {owner.age}</li>\n                    <li>Interests: {owner.interests}</li>\n                </ul>\n              </div>\n            </div>\n              <h3 className=\"name\">{owner.name}</h3>\n            </div>\n          </TinderCard>\n            </div>\n        ))}\n\n      </div>\n<br></br>\n      {/* Button to show current user's info */}\n      <button className='showOwnerInfo btn btn-info' onClick={showInfo}>\n        <h3>ℹ️</h3>\n      </button> \n\n      <div className='buttons'>\n        <button style={{ backgroundColor: !canSwipe && '#C3C4D3' }} onClick={() => swipe('left')}>❌ Swipe left!</button>\n        <button style={{ backgroundColor: !canGoBack && '#C3C4D3' }} onClick={() => goBack()}>Undo!</button>\n        <button style={{ backgroundColor: !canSwipe && '#C3C4D3' }} onClick={() => swipe('right')}>✅ Swipe right!</button>\n      </div>\n      {lastDirection ? (\n        <h2 key={lastDirection} className='infoText'>\n          You swiped {lastDirection}\n        </h2>\n      ) : (\n        <h2 className='infoText'>\n          Swipe Left to pass! Swipe right to Match!\n        </h2>\n      )}\n    </div>\n  )\n}\nexport default SwipeCard","import React from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport Auth from '../utils/auth';\nimport SwipeCard from '../components/SwipeCard'\n\nconst Home = () => {\n    return(\n        <div> \n            {Auth.loggedIn()\n                // Displays page info if logged in\n                ? (\n                    <div>\n                        <SwipeCard/>\n                    </div>\n                ) : (\n                    <div>\n                        {/* Takes user to login page if not logged in */}\n                        <Navigate to='/login' replace={true} />\n                    </div>\n            )}\n        </div>\n    )\n};\n\nexport default Home;\n","import { gql } from '@apollo/client';\n\nexport const CREATE_OWNER = gql`\n  mutation createOwner($username: String!, $email: String!, $password: String!) {\n    createOwner(username: $username, email: $email, password: $password) {\n      token\n      owner {\n        _id\n        username\n      }\n    }\n  }\n`;\n \nexport const CREATE_PET = gql`\n  mutation createPet($pet: petInput!) {\n    createPet(pet: $pet) {\n      _id\n      username\n      email\n      pet {\n        pet_name\n        breed\n        age\n        nature\n        gender\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PET = gql`\n  mutation updatePet($pet_name: String!,$breed: String!, $age: Int, $nature: String!, $gender: String!) {\n    updatePet(pet_name: $pet_name, breed: $breed, age: $age, nature: $nature, gender: $gender) {\n      _id\n      username\n      email\n      pet {\n        _id\n        pet_name\n        breed\n        age\n        nature\n        gender \n      }\n    }\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      owner {\n        _id\n        username\n      }\n    }\n  }\n\n`;\n\nexport const CREATE_CHAT = gql`\nmutation Mutation($user1: String!, $user2: String!) {\n  createChat(user_1: $user1, user_2: $user2) {\n    user_2\n    user_1\n  }\n}\n`;\nexport const CREATE_MESSAGE = gql`\nmutation Mutation($content: String!, $name: String!, $user: String!, $chat: String!) {\n  createMessage(content: $content, name: $name, user: $user, chat: $chat) {\n    user\n    _id\n    name\n  }\n}\n`;\n\nexport const REMOVE_PET = gql`\nmutation removePet($pet_Id:ID!) {\n  removePet(pet_Id:$pet_Id) {\n    pet_Id\n    pet_name\n    savedPets {\n      breed\n      age\n      nature\n      gender\n  }\n}\n} \n` ;\nexport const REMOVE_OWNER = gql`\nmutation removeOwner($ownerId:ID!) {\n  removeOwner(ownerId:$ownerId){\n    name\n    username\n    savedOwners {\n      age\n      interests\n      pets\n    }\n  }\n}\n`;\n\n// export const UPLOAD_IMAGE = gql`\n//   mutation uploadImage() {\n//     uploadImage() {\n//       _id\n      \n//     }\n//   }\n// `","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useNavigate } from \"react-router-dom\";\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n// import Radio from '@mui/material/Radio';\n// import RadioGroup from '@mui/material/RadioGroup';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import FormControl from '@mui/material/FormControl';\n// import FormLabel from '@mui/material/FormLabel';\n\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const Navigate = useNavigate();\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n      // Navigates to home page after login\n      Navigate('/')\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Login</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Successfully Logged in!\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-info\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n                <p>\n                  <Link to=\"/signup\">Don't have an account? Click here to sign up!</Link>\n                </p>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n    </main>\n  );\n};\n\nexport default Login; ","import React, { useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { useMutation } from '@apollo/client';\nimport { CREATE_OWNER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const Navigate = useNavigate();\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [createOwner, { error, data }] = useMutation(CREATE_OWNER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await createOwner({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.createOwner.token);\n      // Navigates new user to profile page\n      Navigate(`/profile/${data.createOwner._id}`)\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Sign Up</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Success!\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your username\"\n                  name=\"username\"\n                  type=\"text\"\n                  value={formState.name}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_OWNER= gql`\n  query owner {\n    owner {\n      _id\n      name\n      username\n      password\n      age\n      interests\n      pet{\n        pet_name\n      }\n    }\n  }\n`;\n\n// export const QUERY_PET = gql`\n//   query pet($_id: String) {\n//    pet(_id: $_id) {\n//     _id\n//     pet_name\n//     breed\n//     age\n//     nature\n//     gender\n//     }\n//   }\n// `;\n\n// export const QUERY_PET = gql`\n//   query owner($_id: ID!) {\n//     owner(_id: $_id) {\n//       Pet {\n//         _id\n//         pet_name\n//         breed\n//         age\n//         nature\n//         gender\n//       }\n//     }\n//   }\n// `;\n\nexport const QUERY_OWNER_BY_ID = gql`\n  query findOwnerById($_id: ID!) {\n    findOwnerById(_id: $_id) {\n      Pet {\n        _id\n        pet_name\n        breed\n        age\n        nature\n        gender\n      }\n    }\n  }\n`;\n\n\nexport const QUERY_MESSAGE = gql`\nquery Message($user: String, $chat: String) {\n  message(user: $user, chat: $chat) {\n    content\n    user\n    _id\n    name\n  }\n}\n`;\nexport const QUERY_CHAT = gql`\nquery Query($user: String) {\n  chat(user: $user) {\n    user_1\n    user_2\n    _id\n  }\n}\n`;","import React from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport Auth from '../utils/auth';\nimport { Link } from 'react-router-dom';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport Divider from '@mui/material/Divider';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CHAT } from '../utils/queries';\n\nconst ChatHome = () => {\n\n   let id = Auth.getProfile().data._id\n    const { loading, data } = useQuery(QUERY_CHAT, {\n        variables:{user: id}\n      });\n      const chatList = data?.chat || [];\n\n\n    return(\n        <div>\n            {Auth.loggedIn()\n                // Displays profile info if logged in\n                ? (\n                    <div>\n                      <h1>Chat Home Page</h1>\n\n                      {loading ? (\n                        <div>Loading...</div>\n                      ) : (\n                        <form >\n                            {chatList.map((chat) => {\n                              console.log(chat)    \n\n                              return (\n                                  <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n                                  \n                                  <ListItem key={chat._id} alignItems=\"flex-start\">\n                                  <Link to={{ pathname: `/chat/${chat._id}` }}>\n                                    <ListItemAvatar>\n                                      <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n                                    </ListItemAvatar>\n                                    \n                                    <ListItemText\n                                      primary=\"Get to know someone paw-some\"\n                                      secondary={\n                                        <React.Fragment>\n                                          <Typography\n                                            sx={{ display: 'inline' }}\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            color=\"text.primary\"\n                                          >\n                                          </Typography>\n                                        \n                                        </React.Fragment>\n                                      }\n                                    />\n                                    </Link>\n                                  </ListItem>\n                                  <Divider variant=\"inset\" component=\"li\" />\n                                </List>\n                              );\n                            })}\n                        </form>\n                      )}\n                    </div>\n                ) : (\n                    <div>\n                        {/* Takes user to login page if not logged in */}\n                        <Navigate to='/login' replace={true} />\n                    </div>\n            )}\n      </div>\n    )\n}\n\nexport default ChatHome;","import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\n// import BottomNavigation from '@mui/material/BottomNavigation';\n// import BottomNavigationAction from '@mui/material/BottomNavigationAction';\nimport Paper from '@mui/material/Paper';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport Avatar from '@mui/material/Avatar';\n// import TextField from '@mui/material/TextField';\n// import { useNavigate } from 'react-router-dom';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_MESSAGE } from '../utils/queries';\nimport { CREATE_MESSAGE } from '../utils/mutations';\nimport { useParams } from 'react-router-dom';\nimport Auth from '../utils/auth';\nexport default function Messages() {\n    let { id } = useParams();\n    const userlo = Auth.getProfile().data._id\n    console.log(id)\n    const [formData, setFormData] = useState(\"\");\n    const { loading, data } = useQuery(QUERY_MESSAGE, {\n        variables: { chat: id, user: userlo },\n        pollInterval:300,\n      });\n  const [createMessage, { error }] = useMutation(CREATE_MESSAGE);\n  const messages = data?.message || [];\n\n \n  function Messagehandler(event){\n    event.preventDefault();\n    const { name, value, message } = event.target\n  setFormData(value)\n  console.log(formData)\n}\nconst Messagesubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const message = await createMessage({\n        variables:{\n        content: formData ,name:\"test\",user:userlo,chat:id\n      }});\n    } catch (err) {\n      console.error(err);\n    }\n\n}\n  return (\n    <Box sx={{ pb: 6 }} >\n      <CssBaseline />\n      {loading ? (\n        <div>Loading...</div>\n      ) : (\n      <List>\n        {messages.map(({ content, _id, user, name }, index) => (\n          <ListItem button key={_id}>\n            <ListItemAvatar>\n              <Avatar alt=\"Profile Picture\" />\n            </ListItemAvatar>\n            <ListItemText primary={name} secondary={content}/>\n          </ListItem>\n        ))}\n      </List>)}\n      {error && <div>Something went wrong...</div>}\n    \n      <Paper sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }} elevation={3}>\n      <form  onSubmit={Messagesubmit} >\n      <label>Enter your message:\n      <input onChange={Messagehandler}\n        type=\"text\" \n        name=\"message\"\n      />\n      </label>\n        <input type=\"submit\" />\n    </form>\n      </Paper>\n    </Box>\n  );\n}\n\n// const messageExamples = [\n//   {\n//     content: 'Brunch this week?',\n//     secondary: \"I'll be in the neighbourhood this week. Let's grab a bite to eat\",\n//     person: '/static/images/avatar/5.jpg',\n//   },\n//   {\n//     content: 'Birthday Gift',\n//     secondary: `Do you have a suggestion for a good present for John on his work\n//       anniversary. I am really confused & would love your thoughts on it.`,\n//     person: '/static/images/avatar/1.jpg',\n//   },\n// ];","import React from 'react';\nimport Messages from '../components/Messages'\nconst Chat = () => {\n\n    return(\n        <div>\n            <Messages/>\n        </div>\n    )\n}\n\nexport default Chat;","import axios from 'axios';\r\nimport React,{Component} from 'react';\r\n\r\nclass ImgUpload extends Component {\r\n\r\n\tstate = {\r\n        // Initially, no file is selected\r\n        selectedFile: null\r\n\t};\r\n\t\r\n\t// On file select (from the pop up)\r\n\tonFileChange = event => {\r\n        \r\n        // Update the state\r\n        this.setState({ selectedFile: event.target.files[0] }); \r\n\t};\r\n\t\r\n\t// On file upload (click the upload button)\r\n\tonFileUpload = () => {\r\n        \r\n        // Create an object of formData\r\n        const formData = new FormData();\r\n        \r\n        // Update the formData object\r\n        formData.append(\r\n            \"myFile\",\r\n            this.state.selectedFile,\r\n            this.state.selectedFile.name\r\n        );\r\n        \r\n        // Details of the uploaded file\r\n        console.log(this.state.selectedFile);\r\n        \r\n        // Request made to the backend api\r\n        // Send formData object\r\n        axios.post(\"api/uploadfile\", formData);\r\n\t};\r\n\t\r\n\t// File content to be displayed after\r\n\t// file upload is complete\r\n\tfileData = () => {\r\n\t    if (this.state.selectedFile) {\r\n\t\t\r\n\t\treturn (\r\n            <div>\r\n                <h2>File Details:</h2>\r\n                \r\n                <p>File Name: {this.state.selectedFile.name}</p>\r\n\r\n                <p>File Type: {this.state.selectedFile.type}</p>\r\n            </div>\r\n\t\t);\r\n        } else {\r\n            return (\r\n            <div>\r\n            </div>\r\n            );\r\n        }\r\n\t};\r\n\t\r\n\trender() {\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<input type=\"file\" onChange={this.onFileChange} />\r\n\t\t\t\t<button onClick={this.onFileUpload}>\r\n\t\t\t\tUpload!\r\n\t\t\t\t</button>\r\n                <br></br>\r\n                <div></div>\r\n\t\t\t</div>\r\n\t\t{this.fileData()}\r\n\t\t</div>\r\n\t);\r\n\t}\r\n}\r\n\r\nexport default ImgUpload;\r\n","import React from 'react';\n// import axios from 'axios';\nimport {useState} from 'react';\nimport { useParams, Navigate } from \"react-router-dom\";\nimport Auth from '../utils/auth';\nimport { useQuery } from '@apollo/client';\n// import { UPDATE_PET} from '../utils/mutations';\nimport { QUERY_OWNER_BY_ID} from '../utils/queries';\nimport ImgUpload from '../components/ImgUpload'\n\nconst Profile = () => {\n    let { id } = useParams();\n\n    const logout = (event) => {\n        event.preventDefault();\n        Auth.logout();\n    };\n\n    // useState to hold visibility\n    const [isVisible, setIsVisible] = useState(true);\n\n    // function to change visibility\n    const editPet = event => {\n        setIsVisible(current => !current);\n    };\n\n    const {loading, data} = useQuery(QUERY_OWNER_BY_ID, {variables: {_id: id}});\n\n    const petData = data?.owner || {};\n\n    // Takes pet info from db and sets to formState\n    // --------- TODO: TARGET PET INFO FROM DB FOR EACH PET DATA IN USESTATE -----------\n    const [formState, setFormState] = useState({ petName: '', petBreed: '', petAge: '', petNature: '', petGender: ''});\n    // const [updatePet, { error, data }] = useMutation(UPDATE_PET);\n\n    // update state based on form input changes\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n        console.log(formState);\n\n        // try {\n        //   const { data } = await updatePet({\n        //     variables: { ...formState },\n        //   });\n        // } catch (e) {\n        //   console.error(e);\n        // }\n\n        setFormState({\n            // ---- TODO: Set to updated pet info -----\n            petName: '', \n            petBreed: '' , \n            petAge: '', \n            petNature: '', \n            petGender: ''  \n        })\n    };\n\n    return(\n        <div>\n            {Auth.loggedIn()\n                // Displays profile info if logged in\n                ? (\n                    <div>\n                        <h1>Welcome to your profile page!</h1>\n                        <div>\n                            <ImgUpload />\n                            <button className='editPetButton btn btn-block btn-info' onClick={editPet}>\n                                Edit Pet Info\n                            </button>\n                        </div>\n                        {/* Form to update pet info */}\n                        <div className={`editPetForm ${isVisible ? 'hidden' : 'visible'}`}>\n                            <form onSubmit={handleFormSubmit}>\n                                <p> Pet's Name:</p>\n                                <input \n                                    className=\"form-input\"\n                                    name=\"petName\"\n                                    type=\"text\"\n                                    value={formState.petName}\n                                    onChange={handleChange}\n                                />\n                                <p> Breed:</p>\n                                <input \n                                    className=\"form-input\"\n                                    name=\"petBreed\"\n                                    type=\"text\"\n                                    value={formState.petBreed}\n                                    onChange={handleChange}\n                                />\n                                <p> Age:</p>\n                                <input \n                                    className=\"form-input\"\n                                    name=\"petAge\"\n                                    type=\"text\"\n                                    value={formState.petAge}\n                                    onChange={handleChange}\n                                />\n                                <p> Nature:</p>\n                                <input \n                                    className=\"form-input\"\n                                    name=\"petNature\"\n                                    type=\"text\"\n                                    value={formState.petNature}\n                                    onChange={handleChange}\n                                />\n                                <p> Gender:</p>\n                                <input \n                                    className=\"form-input\"\n                                    name=\"petGender\"\n                                    type=\"text\"\n                                    value={formState.petGender}\n                                    onChange={handleChange}\n                                />\n                                <button\n                                    className=\"btn btn-block btn-info\"\n                                    style={{ cursor: 'pointer' }}\n                                    type=\"submit\"\n                                >\n                                    Save changes\n                                </button>\n                            </form>\n                        </div>\n                        <br></br>\n                        <div>\n                            {/* Logout button */}\n                            <button onClick={logout}>\n                                Logout\n                            </button>\n                        </div>\n                    </div>\n                ) : (\n                    <div>\n                        {/* Takes user to login page if not logged in */}\n                        <Navigate to='/login' replace={true} />\n                    </div>\n            )}\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport SwipeCard from '../components/SwipeCard'\n\n\nconst Swipe = () => {\n\n    return(\n        \n        <div>\n             <SwipeCard/>\n        </div>\n    )\n};\n\n\n\nexport default Swipe;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\n\nimport Header from './components/header';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport ChatHome from './pages/ChatHome';\nimport Chat from './pages/Chat';\nimport Profile from './pages/Profile';\nimport Swipe from './pages/Swipe';\n\n// Constructs main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\n          <div className=\"container\">\n            <Routes>\n              {/* Home page with profile cards */}\n              <Route \n                path=\"/\" \n                element={<>\n                  <Header />\n                  <Home />\n                </>}\n              />\n              {/* Login page */}\n              <Route \n                path=\"/login\" \n                element={<Login />}\n              />\n              {/* Signup page */}\n              <Route \n                path=\"/signup\" \n                element={<Signup />}\n              />\n              <Route \n                path=\"/chat\" \n                element={<Chat />}\n              />\n              <Route \n                path=\"/swipe\" \n                element={<>\n                  <Header />\n                  <Swipe />\n                </>}\n              />\n              {/* Shows all chats with user's matches */}\n              <Route \n                path=\"/chats\"\n                element={<>\n                  <Header />\n                  <ChatHome />\n                </>}\n              />\n              {/* Specific chats with other users */}\n              <Route \n                path=\"/chat/:id\" \n                element={<>\n                  <Header />\n                  <Chat />\n                </>}\n              />\n              {/* User's profile. Can update info here */}\n              <Route \n                path=\"/profile\" \n                element={<>\n                  <Header />\n                  <Profile />\n                </>}\n              />\n              <Route \n                path=\"/profile/:id\" \n                element={<>\n                  <Header />\n                  <Profile />\n                </>}\n              />\n            </Routes>\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}